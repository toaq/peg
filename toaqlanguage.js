var camxes = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "text": parse_text,
        "discourse": parse_discourse,
        "sentence": parse_sentence,
        "sentence_1": parse_sentence_1,
        "sentence_2": parse_sentence_2,
        "sentence_3": parse_sentence_3,
        "fragment": parse_fragment,
        "coP_sentence": parse_coP_sentence,
        "co_bar_sentence": parse_co_bar_sentence,
        "forethought_coP_sentence": parse_forethought_coP_sentence,
        "forethought_coP_sentence_1": parse_forethought_coP_sentence_1,
        "forethought_co_bar_sentence": parse_forethought_co_bar_sentence,
        "sentence_prefix": parse_sentence_prefix,
        "statement": parse_statement,
        "statement_1": parse_statement_1,
        "statement_2": parse_statement_2,
        "statement_3": parse_statement_3,
        "prenex": parse_prenex,
        "predication": parse_predication,
        "coP_statement": parse_coP_statement,
        "co_bar_statement": parse_co_bar_statement,
        "forethought_coP_statement": parse_forethought_coP_statement,
        "forethought_coP_statement_1": parse_forethought_coP_statement_1,
        "forethought_co_bar_statement": parse_forethought_co_bar_statement,
        "predicate": parse_predicate,
        "predicate_1": parse_predicate_1,
        "predicate_2": parse_predicate_2,
        "predicate_3": parse_predicate_3,
        "predicate_4": parse_predicate_4,
        "serial_predicate": parse_serial_predicate,
        "serial_predicate_2": parse_serial_predicate_2,
        "coP_pred": parse_coP_pred,
        "co_bar_pred": parse_co_bar_pred,
        "forethought_coP_pred": parse_forethought_coP_pred,
        "forethought_coP_pred_1": parse_forethought_coP_pred_1,
        "forethought_co_bar_pred": parse_forethought_co_bar_pred,
        "LU_predicate": parse_LU_predicate,
        "LU_predicate_tone": parse_LU_predicate_tone,
        "MI_predicate": parse_MI_predicate,
        "MI_predicate_1": parse_MI_predicate_1,
        "MI_predicate_tone": parse_MI_predicate_tone,
        "PO_predicate": parse_PO_predicate,
        "PO_predicate_1": parse_PO_predicate_1,
        "PO_predicate_tone": parse_PO_predicate_tone,
        "quotation_predicate": parse_quotation_predicate,
        "MO_predicate": parse_MO_predicate,
        "MO_predicate_tone": parse_MO_predicate_tone,
        "connective": parse_connective,
        "terms": parse_terms,
        "terms_2": parse_terms_2,
        "term": parse_term,
        "linking_word": parse_linking_word,
        "argument": parse_argument,
        "arg_1": parse_arg_1,
        "arg_2": parse_arg_2,
        "arg_3": parse_arg_3,
        "arg_4": parse_arg_4,
        "arg_5": parse_arg_5,
        "arg_6": parse_arg_6,
        "arg_7": parse_arg_7,
        "serial_argument": parse_serial_argument,
        "coP_arg": parse_coP_arg,
        "co_bar_arg": parse_co_bar_arg,
        "forethought_coP_arg": parse_forethought_coP_arg,
        "forethought_coP_arg_1": parse_forethought_coP_arg_1,
        "forethought_co_bar_arg": parse_forethought_co_bar_arg,
        "coP_pred_arg": parse_coP_pred_arg,
        "forethought_coP_pred_arg": parse_forethought_coP_pred_arg,
        "forethought_coP_pred_arg_1": parse_forethought_coP_pred_arg_1,
        "LU_arg": parse_LU_arg,
        "LU_arg_tone": parse_LU_arg_tone,
        "MI_arg": parse_MI_arg,
        "MI_arg_1": parse_MI_arg_1,
        "MI_arg_tone": parse_MI_arg_tone,
        "PO_arg": parse_PO_arg,
        "PO_arg_1": parse_PO_arg_1,
        "PO_arg_tone": parse_PO_arg_tone,
        "quotation_argument": parse_quotation_argument,
        "MO_argument": parse_MO_argument,
        "MO_argument_tone": parse_MO_argument_tone,
        "relative_clause": parse_relative_clause,
        "relative_clause_1": parse_relative_clause_1,
        "relative_clause_2": parse_relative_clause_2,
        "relative_clause_3": parse_relative_clause_3,
        "relative_predication": parse_relative_predication,
        "coP_rel_statement": parse_coP_rel_statement,
        "coP_rel": parse_coP_rel,
        "co_bar_rel": parse_co_bar_rel,
        "forethought_coP_rel": parse_forethought_coP_rel,
        "forethought_coP_rel_1": parse_forethought_coP_rel_1,
        "forethought_co_bar_rel": parse_forethought_co_bar_rel,
        "relative_predicate": parse_relative_predicate,
        "relative_predicate_1": parse_relative_predicate_1,
        "relative_predicate_2": parse_relative_predicate_2,
        "relative_predicate_3": parse_relative_predicate_3,
        "serial_relative_predicate": parse_serial_relative_predicate,
        "coP_pred_relative_predicate": parse_coP_pred_relative_predicate,
        "forethought_coP_pred_relative_predicate": parse_forethought_coP_pred_relative_predicate,
        "forethought_coP_pred_relative_predicate_1": parse_forethought_coP_pred_relative_predicate_1,
        "LU_relative": parse_LU_relative,
        "LU_relative_tone": parse_LU_relative_tone,
        "MI_relative_predicate": parse_MI_relative_predicate,
        "MI_relative_predicate_1": parse_MI_relative_predicate_1,
        "MI_relative_predicate_tone": parse_MI_relative_predicate_tone,
        "PO_relative_predicate": parse_PO_relative_predicate,
        "PO_relative_predicate_1": parse_PO_relative_predicate_1,
        "PO_relative_predicate_tone": parse_PO_relative_predicate_tone,
        "quotation_relative_predicate": parse_quotation_relative_predicate,
        "MO_relative_predicate": parse_MO_relative_predicate,
        "MO_relative_predicate_tone": parse_MO_relative_predicate_tone,
        "termset": parse_termset,
        "termset_II": parse_termset_II,
        "forethought_coP_term_II": parse_forethought_coP_term_II,
        "forethought_co_bar_term_II": parse_forethought_co_bar_term_II,
        "termset_III": parse_termset_III,
        "forethought_coP_term_III": parse_forethought_coP_term_III,
        "forethought_co_bar_term_III": parse_forethought_co_bar_term_III,
        "termset_IV": parse_termset_IV,
        "forethought_coP_term_IV": parse_forethought_coP_term_IV,
        "forethought_co_bar_term_IV": parse_forethought_co_bar_term_IV,
        "termset_V": parse_termset_V,
        "forethought_coP_term_V": parse_forethought_coP_term_V,
        "forethought_co_bar_term_V": parse_forethought_co_bar_term_V,
        "forethought_connective": parse_forethought_connective,
        "forethought_marker": parse_forethought_marker,
        "gik": parse_gik,
        "terms_II": parse_terms_II,
        "terms_III": parse_terms_III,
        "terms_IV": parse_terms_IV,
        "terms_V": parse_terms_V,
        "adverb": parse_adverb,
        "adverb_1": parse_adverb_1,
        "adverb_2": parse_adverb_2,
        "adverb_3": parse_adverb_3,
        "adverb_4": parse_adverb_4,
        "coP_adverb": parse_coP_adverb,
        "co_bar_adverb": parse_co_bar_adverb,
        "forethought_coP_adverb": parse_forethought_coP_adverb,
        "forethought_coP_adverb_1": parse_forethought_coP_adverb_1,
        "forethought_co_bar_adverb": parse_forethought_co_bar_adverb,
        "serial_adverb": parse_serial_adverb,
        "coP_pred_adverb": parse_coP_pred_adverb,
        "forethought_coP_pred_adverb": parse_forethought_coP_pred_adverb,
        "forethought_coP_pred_adverb_1": parse_forethought_coP_pred_adverb_1,
        "LU_adverb": parse_LU_adverb,
        "LU_adverb_tone": parse_LU_adverb_tone,
        "MI_adverb": parse_MI_adverb,
        "MI_adverb_1": parse_MI_adverb_1,
        "MI_adverb_tone": parse_MI_adverb_tone,
        "PO_adverb": parse_PO_adverb,
        "PO_adverb_1": parse_PO_adverb_1,
        "PO_adverb_tone": parse_PO_adverb_tone,
        "quotation_adverb": parse_quotation_adverb,
        "MO_adverb": parse_MO_adverb,
        "MO_adverb_tone": parse_MO_adverb_tone,
        "prepositional_phrase": parse_prepositional_phrase,
        "prepositional_phrase_1": parse_prepositional_phrase_1,
        "prepositional_phrase_2": parse_prepositional_phrase_2,
        "coP_prepositional_phrase": parse_coP_prepositional_phrase,
        "co_bar_prepositional_phrase": parse_co_bar_prepositional_phrase,
        "forethought_coP_prepositional_phrase": parse_forethought_coP_prepositional_phrase,
        "forethought_coP_prepositional_phrase_1": parse_forethought_coP_prepositional_phrase_1,
        "forethought_co_bar_prepositional_phrase": parse_forethought_co_bar_prepositional_phrase,
        "preposition": parse_preposition,
        "preposition_1": parse_preposition_1,
        "preposition_2": parse_preposition_2,
        "preposition_3": parse_preposition_3,
        "preposition_4": parse_preposition_4,
        "coP_preposition": parse_coP_preposition,
        "co_bar_preposition": parse_co_bar_preposition,
        "forethought_coP_preposition": parse_forethought_coP_preposition,
        "forethought_coP_preposition_1": parse_forethought_coP_preposition_1,
        "forethought_co_bar_preposition": parse_forethought_co_bar_preposition,
        "serial_preposition": parse_serial_preposition,
        "coP_pred_preposition": parse_coP_pred_preposition,
        "forethought_coP_pred_preposition": parse_forethought_coP_pred_preposition,
        "forethought_coP_pred_preposition_1": parse_forethought_coP_pred_preposition_1,
        "LU_preposition": parse_LU_preposition,
        "LU_preposition_tone": parse_LU_preposition_tone,
        "MI_preposition": parse_MI_preposition,
        "MI_preposition_1": parse_MI_preposition_1,
        "MI_preposition_tone": parse_MI_preposition_tone,
        "PO_preposition": parse_PO_preposition,
        "PO_preposition_1": parse_PO_preposition_1,
        "PO_preposition_tone": parse_PO_preposition_tone,
        "quotation_preposition": parse_quotation_preposition,
        "MO_preposition": parse_MO_preposition,
        "MO_preposition_tone": parse_MO_preposition_tone,
        "content_clause": parse_content_clause,
        "content_clause_1": parse_content_clause_1,
        "content_predication": parse_content_predication,
        "coP_content_statement": parse_coP_content_statement,
        "content_predicate": parse_content_predicate,
        "content_predicate_1": parse_content_predicate_1,
        "content_predicate_2": parse_content_predicate_2,
        "content_predicate_3": parse_content_predicate_3,
        "serial_content_predicate": parse_serial_content_predicate,
        "coP_pred_content_predicate": parse_coP_pred_content_predicate,
        "forethought_coP_pred_content_predicate": parse_forethought_coP_pred_content_predicate,
        "forethought_coP_pred_content_predicate_1": parse_forethought_coP_pred_content_predicate_1,
        "LU_content": parse_LU_content,
        "LU_content_tone": parse_LU_content_tone,
        "MI_content_predicate": parse_MI_content_predicate,
        "MI_content_predicate_1": parse_MI_content_predicate_1,
        "MI_content_tone": parse_MI_content_tone,
        "PO_content_predicate": parse_PO_content_predicate,
        "PO_content_predicate_1": parse_PO_content_predicate_1,
        "PO_content_tone": parse_PO_content_tone,
        "quotation_content_predicate": parse_quotation_content_predicate,
        "MO_content_predicate": parse_MO_content_predicate,
        "MO_content_predicate_tone": parse_MO_content_predicate_tone,
        "freemod": parse_freemod,
        "interjection": parse_interjection,
        "parenthetical": parse_parenthetical,
        "parenthetical_1": parse_parenthetical_1,
        "incidental": parse_incidental,
        "vocative": parse_vocative,
        "prefix": parse_prefix,
        "prefix_1": parse_prefix_1,
        "focus": parse_focus,
        "end_statement": parse_end_statement,
        "end_statement_1": parse_end_statement_1,
        "null": parse_null,
        "illocutionary": parse_illocutionary,
        "illocutionary_1": parse_illocutionary_1,
        "quantifier": parse_quantifier,
        "tone": parse_tone,
        "compound_tone": parse_compound_tone,
        "arg_tone": parse_arg_tone,
        "relative_tone": parse_relative_tone,
        "verb_tone": parse_verb_tone,
        "content_tone": parse_content_tone,
        "preposition_tone": parse_preposition_tone,
        "adverb_tone": parse_adverb_tone,
        "predicate_word": parse_predicate_word,
        "function_word": parse_function_word,
        "end_prenex": parse_end_prenex,
        "start_incidental": parse_start_incidental,
        "start_parenthetical": parse_start_parenthetical,
        "end_parenthetical": parse_end_parenthetical,
        "vocative_marker": parse_vocative_marker,
        "LU": parse_LU,
        "MI": parse_MI,
        "PO": parse_PO,
        "MO": parse_MO,
        "TEO": parse_TEO,
        "GA": parse_GA,
        "syllable": parse_syllable,
        "initial": parse_initial,
        "desinence": parse_desinence,
        "vowel": parse_vowel,
        "boundary": parse_boundary,
        "a": parse_a,
        "b": parse_b,
        "c": parse_c,
        "d": parse_d,
        "e": parse_e,
        "f": parse_f,
        "g": parse_g,
        "h": parse_h,
        "i": parse_i,
        "j": parse_j,
        "k": parse_k,
        "l": parse_l,
        "m": parse_m,
        "n": parse_n,
        "o": parse_o,
        "p": parse_p,
        "q": parse_q,
        "r": parse_r,
        "s": parse_s,
        "t": parse_t,
        "u": parse_u,
        "w": parse_w,
        "y": parse_y,
        "EOF": parse_EOF,
        "spaces": parse_spaces,
        "space_char": parse_space_char
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "text";
      }
      
      var pos = 0;
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_text() {
        var cacheKey = "text@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_spaces();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_freemod();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_spaces();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_discourse();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = parse_spaces();
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result5 = parse_EOF();
                  result5 = result5 !== null ? result5 : "";
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("text", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("text");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_discourse() {
        var cacheKey = "discourse@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result1 = parse_sentence();
        if (result1 === null) {
          result1 = parse_fragment();
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_sentence();
            if (result1 === null) {
              result1 = parse_fragment();
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("discourse", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_sentence() {
        var cacheKey = "sentence@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_coP_sentence();
        if (result0 === null) {
          result0 = parse_sentence_1();
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("sentence", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_sentence_1() {
        var cacheKey = "sentence_1@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_forethought_coP_sentence();
        if (result0 === null) {
          result0 = parse_sentence_2();
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("sentence", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_sentence_2() {
        var cacheKey = "sentence_2@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_spaces();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_sentence_prefix();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_sentence_3();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("S", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_sentence_3() {
        var cacheKey = "sentence_3@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_spaces();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_statement();
          if (result1 !== null) {
            result2 = parse_spaces();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_illocutionary();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("S", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_fragment() {
        var cacheKey = "fragment@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_spaces();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_coP_rel();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 === null) {
          pos1 = pos;
          result0 = parse_spaces();
          result0 = result0 !== null ? result0 : "";
          if (result0 !== null) {
            result1 = parse_relative_clause();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 === null) {
            pos1 = pos;
            result0 = parse_spaces();
            result0 = result0 !== null ? result0 : "";
            if (result0 !== null) {
              result1 = parse_prenex();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 === null) {
              pos1 = pos;
              result0 = parse_spaces();
              result0 = result0 !== null ? result0 : "";
              if (result0 !== null) {
                result1 = parse_terms();
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("fragment", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_coP_sentence() {
        var cacheKey = "coP_sentence@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_sentence_1();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_co_bar_sentence();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("CoP(S)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_co_bar_sentence() {
        var cacheKey = "co_bar_sentence@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_connective();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_sentence_1();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("Co'", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_forethought_coP_sentence() {
        var cacheKey = "forethought_coP_sentence@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_forethought_connective();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_forethought_coP_sentence_1();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("forethoughtCoP(S)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_forethought_coP_sentence_1() {
        var cacheKey = "forethought_coP_sentence_1@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_sentence();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_forethought_co_bar_sentence();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("CoP(S)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_forethought_co_bar_sentence() {
        var cacheKey = "forethought_co_bar_sentence@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_gik();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_sentence();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("Co'", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_sentence_prefix() {
        var cacheKey = "sentence_prefix@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_k();
        if (result0 !== null) {
          result1 = parse_e();
          if (result1 !== null) {
            result2 = parse_o();
            if (result2 !== null) {
              pos2 = pos;
              reportFailures++;
              result3 = parse_boundary();
              reportFailures--;
              if (result3 !== null) {
                result3 = "";
                pos = pos2;
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 === null) {
          pos1 = pos;
          result0 = parse_j();
          if (result0 !== null) {
            result1 = parse_e();
            if (result1 !== null) {
              pos2 = pos;
              reportFailures++;
              result2 = parse_boundary();
              reportFailures--;
              if (result2 !== null) {
                result2 = "";
                pos = pos2;
              } else {
                result2 = null;
              }
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["prefix", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_statement() {
        var cacheKey = "statement@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_coP_statement();
        if (result0 === null) {
          result0 = parse_statement_1();
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("statement", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_statement_1() {
        var cacheKey = "statement_1@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_forethought_coP_statement();
        if (result0 === null) {
          result0 = parse_statement_2();
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("statement", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_statement_2() {
        var cacheKey = "statement_2@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_statement_3();
        if (result0 !== null) {
          result1 = parse_end_statement();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("statement", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_statement_3() {
        var cacheKey = "statement_3@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_prenex();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_predication();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("statement", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_prenex() {
        var cacheKey = "prenex@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_terms();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_end_prenex();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("prenex", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_predication() {
        var cacheKey = "predication@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_predicate();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_terms();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("predication", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_coP_statement() {
        var cacheKey = "coP_statement@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_statement_1();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_co_bar_statement();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("CoP(Statement)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_co_bar_statement() {
        var cacheKey = "co_bar_statement@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_connective();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_statement_1();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("Co'", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_forethought_coP_statement() {
        var cacheKey = "forethought_coP_statement@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_forethought_connective();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_forethought_coP_statement_1();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("forethoughtCoP(Statement)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_forethought_coP_statement_1() {
        var cacheKey = "forethought_coP_statement_1@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_statement();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_forethought_co_bar_statement();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("CoP(Statement)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_forethought_co_bar_statement() {
        var cacheKey = "forethought_co_bar_statement@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_gik();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_statement();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("Co'", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_predicate() {
        var cacheKey = "predicate@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_serial_predicate();
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("predicate", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_predicate_1() {
        var cacheKey = "predicate_1@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_coP_pred();
        if (result0 === null) {
          result0 = parse_predicate_2();
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("predicate", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_predicate_2() {
        var cacheKey = "predicate_2@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        result0 = parse_forethought_coP_pred();
        if (result0 === null) {
          result0 = parse_LU_predicate();
          if (result0 === null) {
            result0 = parse_MI_predicate();
            if (result0 === null) {
              result0 = parse_PO_predicate();
              if (result0 === null) {
                result0 = parse_quotation_predicate();
                if (result0 === null) {
                  pos1 = pos;
                  result0 = parse_prefix();
                  if (result0 !== null) {
                    result1 = parse_spaces();
                    result1 = result1 !== null ? result1 : "";
                    if (result1 !== null) {
                      result2 = parse_predicate_2();
                      if (result2 !== null) {
                        result0 = [result0, result1, result2];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                  if (result0 === null) {
                    result0 = parse_predicate_3();
                  }
                }
              }
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("predicate", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_predicate_3() {
        var cacheKey = "predicate_3@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_predicate_4();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_freemod();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("predicate", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_predicate_4() {
        var cacheKey = "predicate_4@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_syllable();
        if (result0 !== null) {
          result1 = parse_verb_tone();
          if (result1 !== null) {
            pos2 = pos;
            result3 = parse_syllable();
            if (result3 !== null) {
              result4 = parse_compound_tone();
              if (result4 !== null) {
                result3 = [result3, result4];
              } else {
                result3 = null;
                pos = pos2;
              }
            } else {
              result3 = null;
              pos = pos2;
            }
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                pos2 = pos;
                result3 = parse_syllable();
                if (result3 !== null) {
                  result4 = parse_compound_tone();
                  if (result4 !== null) {
                    result3 = [result3, result4];
                  } else {
                    result3 = null;
                    pos = pos2;
                  }
                } else {
                  result3 = null;
                  pos = pos2;
                }
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 === null) {
          pos1 = pos;
          result0 = parse_predicate_word();
          if (result0 !== null) {
            result1 = parse_verb_tone();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["predicate", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_serial_predicate() {
        var cacheKey = "serial_predicate@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_serial_predicate_2();
        if (result0 === null) {
          result0 = parse_predicate_1();
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("serialpredicate", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_serial_predicate_2() {
        var cacheKey = "serial_predicate_2@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_predicate_1();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_serial_predicate();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("serialpredicate_2", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_coP_pred() {
        var cacheKey = "coP_pred@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_predicate_2();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_co_bar_pred();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("CoP(VP)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_co_bar_pred() {
        var cacheKey = "co_bar_pred@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_connective();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_predicate_1();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("Co'", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_forethought_coP_pred() {
        var cacheKey = "forethought_coP_pred@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_forethought_connective();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_forethought_coP_pred_1();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("forethoughtCoP(V)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_forethought_coP_pred_1() {
        var cacheKey = "forethought_coP_pred_1@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_predicate();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_forethought_co_bar_pred();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("CoP(V)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_forethought_co_bar_pred() {
        var cacheKey = "forethought_co_bar_pred@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_gik();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_predicate();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("Co'", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LU_predicate() {
        var cacheKey = "LU_predicate@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_LU_predicate_tone();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_statement();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("VP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LU_predicate_tone() {
        var cacheKey = "LU_predicate_tone@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_LU();
        if (result0 !== null) {
          result1 = parse_verb_tone();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["predicatizer", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MI_predicate() {
        var cacheKey = "MI_predicate@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_MI_predicate_1();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_GA();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("VP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MI_predicate_1() {
        var cacheKey = "MI_predicate_1@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_MI_predicate_tone();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_predicate();
            if (result2 === null) {
              result2 = parse_argument();
              if (result2 === null) {
                result2 = parse_adverb();
                if (result2 === null) {
                  result2 = parse_prepositional_phrase();
                }
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("VP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MI_predicate_tone() {
        var cacheKey = "MI_predicate_tone@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_MI();
        if (result0 !== null) {
          result1 = parse_verb_tone();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["predicatizer", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PO_predicate() {
        var cacheKey = "PO_predicate@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_PO_predicate_1();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_GA();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("VP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PO_predicate_1() {
        var cacheKey = "PO_predicate_1@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_PO_predicate_tone();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_argument();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("VP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PO_predicate_tone() {
        var cacheKey = "PO_predicate_tone@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_PO();
        if (result0 !== null) {
          result1 = parse_verb_tone();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["predicatizer", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_quotation_predicate() {
        var cacheKey = "quotation_predicate@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_MO_predicate();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_TEO();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("VP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MO_predicate() {
        var cacheKey = "MO_predicate@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_MO_predicate_tone();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_discourse();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("VP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MO_predicate_tone() {
        var cacheKey = "MO_predicate_tone@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_MO();
        if (result0 !== null) {
          result1 = parse_verb_tone();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["quote", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_connective() {
        var cacheKey = "connective@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        result0 = parse_r();
        if (result0 !== null) {
          result1 = parse_a();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos2;
          }
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 === null) {
          pos2 = pos;
          result0 = parse_r();
          if (result0 !== null) {
            result1 = parse_u();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos2;
            }
          } else {
            result0 = null;
            pos = pos2;
          }
          if (result0 === null) {
            pos2 = pos;
            result0 = parse_r();
            if (result0 !== null) {
              result1 = parse_i();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos2;
              }
            } else {
              result0 = null;
              pos = pos2;
            }
            if (result0 === null) {
              pos2 = pos;
              result0 = parse_r();
              if (result0 !== null) {
                result1 = parse_o();
                if (result1 !== null) {
                  result2 = parse_i();
                  if (result2 !== null) {
                    result0 = [result0, result1, result2];
                  } else {
                    result0 = null;
                    pos = pos2;
                  }
                } else {
                  result0 = null;
                  pos = pos2;
                }
              } else {
                result0 = null;
                pos = pos2;
              }
              if (result0 === null) {
                pos2 = pos;
                result0 = parse_r();
                if (result0 !== null) {
                  result1 = parse_o();
                  if (result1 !== null) {
                    result0 = [result0, result1];
                  } else {
                    result0 = null;
                    pos = pos2;
                  }
                } else {
                  result0 = null;
                  pos = pos2;
                }
                if (result0 === null) {
                  pos2 = pos;
                  result0 = parse_r();
                  if (result0 !== null) {
                    result1 = parse_e();
                    if (result1 !== null) {
                      result0 = [result0, result1];
                    } else {
                      result0 = null;
                      pos = pos2;
                    }
                  } else {
                    result0 = null;
                    pos = pos2;
                  }
                }
              }
            }
          }
        }
        if (result0 !== null) {
          pos2 = pos;
          reportFailures++;
          result1 = parse_boundary();
          reportFailures--;
          if (result1 !== null) {
            result1 = "";
            pos = pos2;
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["Co", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_terms() {
        var cacheKey = "terms@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_terms_2();
        if (result0 === null) {
          result0 = parse_term();
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("terms", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_terms_2() {
        var cacheKey = "terms_2@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_term();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_terms();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("terms", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_term() {
        var cacheKey = "term@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_linking_word();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_argument();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 === null) {
          result0 = parse_adverb();
          if (result0 === null) {
            result0 = parse_termset();
            if (result0 === null) {
              result0 = parse_prepositional_phrase();
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("term", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_linking_word() {
        var cacheKey = "linking_word@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        result0 = parse_f();
        if (result0 !== null) {
          result1 = parse_i();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos2;
          }
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 === null) {
          pos2 = pos;
          result0 = parse_g();
          if (result0 !== null) {
            result1 = parse_o();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos2;
            }
          } else {
            result0 = null;
            pos = pos2;
          }
          if (result0 === null) {
            pos2 = pos;
            result0 = parse_c();
            if (result0 !== null) {
              result1 = parse_u();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos2;
              }
            } else {
              result0 = null;
              pos = pos2;
            }
            if (result0 === null) {
              pos2 = pos;
              result0 = parse_k();
              if (result0 !== null) {
                result1 = parse_e();
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = pos2;
                }
              } else {
                result0 = null;
                pos = pos2;
              }
            }
          }
        }
        if (result0 !== null) {
          pos2 = pos;
          reportFailures++;
          result1 = parse_boundary();
          reportFailures--;
          if (result1 !== null) {
            result1 = "";
            pos = pos2;
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["case", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_argument() {
        var cacheKey = "argument@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_coP_arg();
        if (result0 === null) {
          result0 = parse_arg_1();
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("NP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_arg_1() {
        var cacheKey = "arg_1@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_forethought_coP_arg();
        if (result0 === null) {
          result0 = parse_arg_2();
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("NP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_arg_2() {
        var cacheKey = "arg_2@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_focus();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_arg_3();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("NP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_arg_3() {
        var cacheKey = "arg_3@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_quantifier();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_arg_4();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("NP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_arg_4() {
        var cacheKey = "arg_4@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_arg_5();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_relative_clause();
            if (result2 === null) {
              result2 = parse_freemod();
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("NP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_arg_5() {
        var cacheKey = "arg_5@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_serial_argument();
        if (result0 === null) {
          result0 = parse_arg_6();
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("NP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_arg_6() {
        var cacheKey = "arg_6@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_content_clause();
        if (result0 === null) {
          result0 = parse_coP_pred_arg();
          if (result0 === null) {
            result0 = parse_forethought_coP_pred_arg();
            if (result0 === null) {
              result0 = parse_LU_arg();
              if (result0 === null) {
                result0 = parse_MI_arg();
                if (result0 === null) {
                  result0 = parse_PO_arg();
                  if (result0 === null) {
                    result0 = parse_quotation_argument();
                    if (result0 === null) {
                      result0 = parse_arg_7();
                    }
                  }
                }
              }
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("NP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_arg_7() {
        var cacheKey = "arg_7@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_syllable();
        if (result0 !== null) {
          result1 = parse_arg_tone();
          if (result1 !== null) {
            pos2 = pos;
            result3 = parse_syllable();
            if (result3 !== null) {
              result4 = parse_compound_tone();
              if (result4 !== null) {
                result3 = [result3, result4];
              } else {
                result3 = null;
                pos = pos2;
              }
            } else {
              result3 = null;
              pos = pos2;
            }
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                pos2 = pos;
                result3 = parse_syllable();
                if (result3 !== null) {
                  result4 = parse_compound_tone();
                  if (result4 !== null) {
                    result3 = [result3, result4];
                  } else {
                    result3 = null;
                    pos = pos2;
                  }
                } else {
                  result3 = null;
                  pos = pos2;
                }
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 === null) {
          pos1 = pos;
          result0 = parse_predicate_word();
          if (result0 !== null) {
            result1 = parse_arg_tone();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["NP", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_serial_argument() {
        var cacheKey = "serial_argument@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_arg_6();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_serial_predicate();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("serialargument", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_coP_arg() {
        var cacheKey = "coP_arg@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_arg_1();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_co_bar_arg();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("CoP(NP)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_co_bar_arg() {
        var cacheKey = "co_bar_arg@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_connective();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_argument();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("Co'", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_forethought_coP_arg() {
        var cacheKey = "forethought_coP_arg@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_forethought_connective();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_forethought_coP_arg_1();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("forethoughtCoP(NP)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_forethought_coP_arg_1() {
        var cacheKey = "forethought_coP_arg_1@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_argument();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_forethought_co_bar_arg();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("CoP(NP)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_forethought_co_bar_arg() {
        var cacheKey = "forethought_co_bar_arg@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_gik();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_argument();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("Co'", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_coP_pred_arg() {
        var cacheKey = "coP_pred_arg@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_arg_7();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_co_bar_pred();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("CoP(NP)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_forethought_coP_pred_arg() {
        var cacheKey = "forethought_coP_pred_arg@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_forethought_connective();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_forethought_coP_pred_arg_1();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("forethoughtCoP(NP)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_forethought_coP_pred_arg_1() {
        var cacheKey = "forethought_coP_pred_arg_1@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_argument();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_forethought_co_bar_pred();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("CoP(VP)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LU_arg() {
        var cacheKey = "LU_arg@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_LU_arg_tone();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_statement();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("NP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LU_arg_tone() {
        var cacheKey = "LU_arg_tone@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_LU();
        if (result0 !== null) {
          result1 = parse_arg_tone();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["predicatizer", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MI_arg() {
        var cacheKey = "MI_arg@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_MI_arg_1();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_GA();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("NP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MI_arg_1() {
        var cacheKey = "MI_arg_1@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_MI_arg_tone();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_predicate();
            if (result2 === null) {
              result2 = parse_argument();
              if (result2 === null) {
                result2 = parse_adverb();
                if (result2 === null) {
                  result2 = parse_prepositional_phrase();
                }
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("NP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MI_arg_tone() {
        var cacheKey = "MI_arg_tone@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_MI();
        if (result0 !== null) {
          result1 = parse_arg_tone();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["predicatizer", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PO_arg() {
        var cacheKey = "PO_arg@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_PO_arg_1();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_GA();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("NP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PO_arg_1() {
        var cacheKey = "PO_arg_1@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_PO_arg_tone();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_argument();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("NP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PO_arg_tone() {
        var cacheKey = "PO_arg_tone@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_PO();
        if (result0 !== null) {
          result1 = parse_arg_tone();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["predicatizer", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_quotation_argument() {
        var cacheKey = "quotation_argument@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_MO_argument();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_TEO();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("NP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MO_argument() {
        var cacheKey = "MO_argument@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_MO_argument_tone();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_discourse();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("NP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MO_argument_tone() {
        var cacheKey = "MO_argument_tone@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_MO();
        if (result0 !== null) {
          result1 = parse_arg_tone();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["quote", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_relative_clause() {
        var cacheKey = "relative_clause@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_coP_rel();
        if (result0 === null) {
          result0 = parse_LU_relative();
          if (result0 === null) {
            result0 = parse_relative_clause_1();
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("relative", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_relative_clause_1() {
        var cacheKey = "relative_clause_1@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_forethought_coP_rel();
        if (result0 === null) {
          result0 = parse_relative_clause_2();
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("relative", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_relative_clause_2() {
        var cacheKey = "relative_clause_2@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_coP_rel_statement();
        if (result0 === null) {
          result0 = parse_relative_clause_3();
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("relative", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_relative_clause_3() {
        var cacheKey = "relative_clause_3@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_relative_predication();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_end_statement();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("relative", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_relative_predication() {
        var cacheKey = "relative_predication@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_relative_predicate();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_terms();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("relative", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_coP_rel_statement() {
        var cacheKey = "coP_rel_statement@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_relative_clause_3();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_co_bar_statement();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("CoP(RelP)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_coP_rel() {
        var cacheKey = "coP_rel@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_relative_clause_1();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_co_bar_rel();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("CoP(Rel)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_co_bar_rel() {
        var cacheKey = "co_bar_rel@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_connective();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_relative_clause_1();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("Co'", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_forethought_coP_rel() {
        var cacheKey = "forethought_coP_rel@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_forethought_connective();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_forethought_coP_rel_1();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("forethoughtCoP(RelP)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_forethought_coP_rel_1() {
        var cacheKey = "forethought_coP_rel_1@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_relative_clause();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_forethought_co_bar_rel();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("CoP(RelP)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_forethought_co_bar_rel() {
        var cacheKey = "forethought_co_bar_rel@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_gik();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_relative_clause();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("Co'", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_relative_predicate() {
        var cacheKey = "relative_predicate@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_serial_relative_predicate();
        if (result0 === null) {
          result0 = parse_relative_predicate_1();
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("predicate", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_relative_predicate_1() {
        var cacheKey = "relative_predicate_1@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_coP_pred_relative_predicate();
        if (result0 === null) {
          result0 = parse_forethought_coP_pred_relative_predicate();
          if (result0 === null) {
            result0 = parse_relative_predicate_2();
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("predicate_1", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_relative_predicate_2() {
        var cacheKey = "relative_predicate_2@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_MI_relative_predicate();
        if (result0 === null) {
          result0 = parse_PO_relative_predicate();
          if (result0 === null) {
            result0 = parse_quotation_relative_predicate();
            if (result0 === null) {
              result0 = parse_relative_predicate_3();
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("predicate_1", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_relative_predicate_3() {
        var cacheKey = "relative_predicate_3@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_syllable();
        if (result0 !== null) {
          result1 = parse_relative_tone();
          if (result1 !== null) {
            pos2 = pos;
            result3 = parse_syllable();
            if (result3 !== null) {
              result4 = parse_compound_tone();
              if (result4 !== null) {
                result3 = [result3, result4];
              } else {
                result3 = null;
                pos = pos2;
              }
            } else {
              result3 = null;
              pos = pos2;
            }
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                pos2 = pos;
                result3 = parse_syllable();
                if (result3 !== null) {
                  result4 = parse_compound_tone();
                  if (result4 !== null) {
                    result3 = [result3, result4];
                  } else {
                    result3 = null;
                    pos = pos2;
                  }
                } else {
                  result3 = null;
                  pos = pos2;
                }
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 === null) {
          pos1 = pos;
          result0 = parse_predicate_word();
          if (result0 !== null) {
            result1 = parse_relative_tone();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["predicate_2", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_serial_relative_predicate() {
        var cacheKey = "serial_relative_predicate@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_relative_predicate_1();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_serial_predicate();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("serialrelative", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_coP_pred_relative_predicate() {
        var cacheKey = "coP_pred_relative_predicate@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_relative_predicate_2();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_co_bar_pred();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("CoP(VP)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_forethought_coP_pred_relative_predicate() {
        var cacheKey = "forethought_coP_pred_relative_predicate@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_forethought_connective();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_forethought_coP_pred_relative_predicate_1();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("forethoughtCoP(VP)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_forethought_coP_pred_relative_predicate_1() {
        var cacheKey = "forethought_coP_pred_relative_predicate_1@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_relative_predicate();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_forethought_co_bar_pred();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("CoP(VP)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LU_relative() {
        var cacheKey = "LU_relative@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_LU_relative_tone();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_statement();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("RelP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LU_relative_tone() {
        var cacheKey = "LU_relative_tone@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_LU();
        if (result0 !== null) {
          result1 = parse_relative_tone();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["predicatizer", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MI_relative_predicate() {
        var cacheKey = "MI_relative_predicate@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_MI_relative_predicate_1();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_GA();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("VP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MI_relative_predicate_1() {
        var cacheKey = "MI_relative_predicate_1@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_MI_relative_predicate_tone();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_predicate();
            if (result2 === null) {
              result2 = parse_argument();
              if (result2 === null) {
                result2 = parse_adverb();
                if (result2 === null) {
                  result2 = parse_prepositional_phrase();
                }
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("VP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MI_relative_predicate_tone() {
        var cacheKey = "MI_relative_predicate_tone@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_MI();
        if (result0 !== null) {
          result1 = parse_relative_tone();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["predicatizer", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PO_relative_predicate() {
        var cacheKey = "PO_relative_predicate@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_PO_relative_predicate_1();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_GA();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("VP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PO_relative_predicate_1() {
        var cacheKey = "PO_relative_predicate_1@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_PO_relative_predicate_tone();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_argument();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("VP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PO_relative_predicate_tone() {
        var cacheKey = "PO_relative_predicate_tone@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_PO();
        if (result0 !== null) {
          result1 = parse_relative_tone();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["predicatizer", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_quotation_relative_predicate() {
        var cacheKey = "quotation_relative_predicate@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_MO_relative_predicate();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_TEO();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("RelP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MO_relative_predicate() {
        var cacheKey = "MO_relative_predicate@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_MO_relative_predicate_tone();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_discourse();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("RelP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MO_relative_predicate_tone() {
        var cacheKey = "MO_relative_predicate_tone@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_MO();
        if (result0 !== null) {
          result1 = parse_relative_tone();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["quote", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_termset() {
        var cacheKey = "termset@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_termset_V();
        if (result0 === null) {
          result0 = parse_termset_IV();
          if (result0 === null) {
            result0 = parse_termset_III();
            if (result0 === null) {
              result0 = parse_termset_II();
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("Termset", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_termset_II() {
        var cacheKey = "termset_II@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_forethought_connective();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_forethought_coP_term_II();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("Termset", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_forethought_coP_term_II() {
        var cacheKey = "forethought_coP_term_II@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_terms_II();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_forethought_co_bar_term_II();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("CoP(NP)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_forethought_co_bar_term_II() {
        var cacheKey = "forethought_co_bar_term_II@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_gik();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_terms_II();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("Co'", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_termset_III() {
        var cacheKey = "termset_III@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_forethought_connective();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_forethought_coP_term_III();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("Termset", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_forethought_coP_term_III() {
        var cacheKey = "forethought_coP_term_III@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_terms_III();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_forethought_co_bar_term_III();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("CoP(NP)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_forethought_co_bar_term_III() {
        var cacheKey = "forethought_co_bar_term_III@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_gik();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_terms_III();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("Co'", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_termset_IV() {
        var cacheKey = "termset_IV@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_forethought_connective();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_forethought_coP_term_IV();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("Termset", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_forethought_coP_term_IV() {
        var cacheKey = "forethought_coP_term_IV@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_terms_IV();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_forethought_co_bar_term_IV();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("CoP(NP)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_forethought_co_bar_term_IV() {
        var cacheKey = "forethought_co_bar_term_IV@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_gik();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_terms_IV();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("Co'", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_termset_V() {
        var cacheKey = "termset_V@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_forethought_connective();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_forethought_coP_term_V();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("Termset", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_forethought_coP_term_V() {
        var cacheKey = "forethought_coP_term_V@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_terms_V();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_forethought_co_bar_term_V();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("CoP(NP)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_forethought_co_bar_term_V() {
        var cacheKey = "forethought_co_bar_term_V@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_gik();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_terms_V();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("Co'", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_forethought_connective() {
        var cacheKey = "forethought_connective@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_spaces();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_forethought_marker();
          if (result1 !== null) {
            result2 = parse_spaces();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_connective();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("forethoughtconnective", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_forethought_marker() {
        var cacheKey = "forethought_marker@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_t();
        if (result0 !== null) {
          result1 = parse_o();
          if (result1 !== null) {
            pos2 = pos;
            reportFailures++;
            result2 = parse_boundary();
            reportFailures--;
            if (result2 !== null) {
              result2 = "";
              pos = pos2;
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["forethoughtmarker", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_gik() {
        var cacheKey = "gik@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_t();
        if (result0 !== null) {
          result1 = parse_o();
          if (result1 !== null) {
            pos2 = pos;
            reportFailures++;
            result2 = parse_boundary();
            reportFailures--;
            if (result2 !== null) {
              result2 = "";
              pos = pos2;
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["medialseparator", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_terms_II() {
        var cacheKey = "terms_II@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_term();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_term();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("terms", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_terms_III() {
        var cacheKey = "terms_III@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_term();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_terms_II();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("terms", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_terms_IV() {
        var cacheKey = "terms_IV@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_term();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_terms_III();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("terms", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_terms_V() {
        var cacheKey = "terms_V@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_term();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_terms_IV();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("terms", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_adverb() {
        var cacheKey = "adverb@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_coP_adverb();
        if (result0 === null) {
          result0 = parse_adverb_1();
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("adverb", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_adverb_1() {
        var cacheKey = "adverb_1@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_forethought_coP_adverb();
        if (result0 === null) {
          result0 = parse_adverb_2();
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("adverb_1", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_adverb_2() {
        var cacheKey = "adverb_2@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_serial_adverb();
        if (result0 === null) {
          result0 = parse_adverb_3();
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("adverb_2", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_adverb_3() {
        var cacheKey = "adverb_3@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_coP_pred_adverb();
        if (result0 === null) {
          result0 = parse_forethought_coP_pred_adverb();
          if (result0 === null) {
            result0 = parse_LU_adverb();
            if (result0 === null) {
              result0 = parse_MI_adverb();
              if (result0 === null) {
                result0 = parse_PO_adverb();
                if (result0 === null) {
                  result0 = parse_quotation_adverb();
                  if (result0 === null) {
                    result0 = parse_adverb_4();
                  }
                }
              }
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("adverb_3", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_adverb_4() {
        var cacheKey = "adverb_4@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_syllable();
        if (result0 !== null) {
          result1 = parse_adverb_tone();
          if (result1 !== null) {
            pos2 = pos;
            result3 = parse_syllable();
            if (result3 !== null) {
              result4 = parse_compound_tone();
              if (result4 !== null) {
                result3 = [result3, result4];
              } else {
                result3 = null;
                pos = pos2;
              }
            } else {
              result3 = null;
              pos = pos2;
            }
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                pos2 = pos;
                result3 = parse_syllable();
                if (result3 !== null) {
                  result4 = parse_compound_tone();
                  if (result4 !== null) {
                    result3 = [result3, result4];
                  } else {
                    result3 = null;
                    pos = pos2;
                  }
                } else {
                  result3 = null;
                  pos = pos2;
                }
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 === null) {
          pos1 = pos;
          result0 = parse_predicate_word();
          if (result0 !== null) {
            result1 = parse_adverb_tone();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["adverb_4", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_coP_adverb() {
        var cacheKey = "coP_adverb@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_adverb_1();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_co_bar_adverb();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("CoP(Adv)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_co_bar_adverb() {
        var cacheKey = "co_bar_adverb@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_connective();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_adverb();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("Co'", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_forethought_coP_adverb() {
        var cacheKey = "forethought_coP_adverb@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_forethought_connective();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_forethought_coP_adverb_1();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("forethoughtCoP(AdvP)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_forethought_coP_adverb_1() {
        var cacheKey = "forethought_coP_adverb_1@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_adverb();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_forethought_co_bar_adverb();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("CoP(AdvP)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_forethought_co_bar_adverb() {
        var cacheKey = "forethought_co_bar_adverb@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_gik();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_adverb();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("Co'", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_serial_adverb() {
        var cacheKey = "serial_adverb@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_adverb_3();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_serial_predicate();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("serialadverb", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_coP_pred_adverb() {
        var cacheKey = "coP_pred_adverb@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_adverb_4();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_co_bar_pred();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("CoP(AdvP)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_forethought_coP_pred_adverb() {
        var cacheKey = "forethought_coP_pred_adverb@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_forethought_connective();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_forethought_coP_pred_adverb_1();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("forethoughtCoP(AdvP)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_forethought_coP_pred_adverb_1() {
        var cacheKey = "forethought_coP_pred_adverb_1@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_adverb();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_forethought_co_bar_pred();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("CoP(VP)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LU_adverb() {
        var cacheKey = "LU_adverb@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_LU_adverb_tone();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_statement();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("AdvP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LU_adverb_tone() {
        var cacheKey = "LU_adverb_tone@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_LU();
        if (result0 !== null) {
          result1 = parse_adverb_tone();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["predicatizer", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MI_adverb() {
        var cacheKey = "MI_adverb@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_MI_adverb_1();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_GA();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("AdvP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MI_adverb_1() {
        var cacheKey = "MI_adverb_1@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_MI_adverb_tone();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_predicate();
            if (result2 === null) {
              result2 = parse_argument();
              if (result2 === null) {
                result2 = parse_adverb();
                if (result2 === null) {
                  result2 = parse_prepositional_phrase();
                }
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("AdvP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MI_adverb_tone() {
        var cacheKey = "MI_adverb_tone@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_MI();
        if (result0 !== null) {
          result1 = parse_adverb_tone();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["predicatizer", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PO_adverb() {
        var cacheKey = "PO_adverb@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_PO_adverb_1();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_GA();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("AdvP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PO_adverb_1() {
        var cacheKey = "PO_adverb_1@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_PO_adverb_tone();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_argument();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("AdvP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PO_adverb_tone() {
        var cacheKey = "PO_adverb_tone@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_PO();
        if (result0 !== null) {
          result1 = parse_adverb_tone();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["predicatizer", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_quotation_adverb() {
        var cacheKey = "quotation_adverb@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_MO_adverb();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_TEO();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("AdvP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MO_adverb() {
        var cacheKey = "MO_adverb@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_MO_adverb_tone();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_discourse();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("AdvP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MO_adverb_tone() {
        var cacheKey = "MO_adverb_tone@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_MO();
        if (result0 !== null) {
          result1 = parse_adverb_tone();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["quote", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_prepositional_phrase() {
        var cacheKey = "prepositional_phrase@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_coP_prepositional_phrase();
        if (result0 === null) {
          result0 = parse_prepositional_phrase_1();
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("prepositionalphrase", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_prepositional_phrase_1() {
        var cacheKey = "prepositional_phrase_1@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_forethought_coP_prepositional_phrase();
        if (result0 === null) {
          result0 = parse_prepositional_phrase_2();
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("PP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_prepositional_phrase_2() {
        var cacheKey = "prepositional_phrase_2@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_preposition();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_argument();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("PP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_coP_prepositional_phrase() {
        var cacheKey = "coP_prepositional_phrase@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_prepositional_phrase_1();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_co_bar_prepositional_phrase();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("CoP(PP)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_co_bar_prepositional_phrase() {
        var cacheKey = "co_bar_prepositional_phrase@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_connective();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_prepositional_phrase_1();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("Co'", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_forethought_coP_prepositional_phrase() {
        var cacheKey = "forethought_coP_prepositional_phrase@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_forethought_connective();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_forethought_coP_prepositional_phrase_1();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("forethoughtCoP(PP)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_forethought_coP_prepositional_phrase_1() {
        var cacheKey = "forethought_coP_prepositional_phrase_1@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_prepositional_phrase();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_forethought_co_bar_prepositional_phrase();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("CoP(PP)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_forethought_co_bar_prepositional_phrase() {
        var cacheKey = "forethought_co_bar_prepositional_phrase@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_gik();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_prepositional_phrase();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("Co'", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_preposition() {
        var cacheKey = "preposition@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_coP_preposition();
        if (result0 === null) {
          result0 = parse_preposition_1();
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("preposition", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_preposition_1() {
        var cacheKey = "preposition_1@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_forethought_coP_preposition();
        if (result0 === null) {
          result0 = parse_preposition_2();
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("prep", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_preposition_2() {
        var cacheKey = "preposition_2@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_serial_preposition();
        if (result0 === null) {
          result0 = parse_preposition_3();
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("prep", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_preposition_3() {
        var cacheKey = "preposition_3@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_coP_pred_preposition();
        if (result0 === null) {
          result0 = parse_forethought_coP_pred_preposition();
          if (result0 === null) {
            result0 = parse_LU_preposition();
            if (result0 === null) {
              result0 = parse_MI_preposition();
              if (result0 === null) {
                result0 = parse_PO_preposition();
                if (result0 === null) {
                  result0 = parse_quotation_preposition();
                  if (result0 === null) {
                    result0 = parse_preposition_4();
                  }
                }
              }
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("prep", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_preposition_4() {
        var cacheKey = "preposition_4@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_syllable();
        if (result0 !== null) {
          result1 = parse_preposition_tone();
          if (result1 !== null) {
            pos2 = pos;
            result3 = parse_syllable();
            if (result3 !== null) {
              result4 = parse_compound_tone();
              if (result4 !== null) {
                result3 = [result3, result4];
              } else {
                result3 = null;
                pos = pos2;
              }
            } else {
              result3 = null;
              pos = pos2;
            }
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                pos2 = pos;
                result3 = parse_syllable();
                if (result3 !== null) {
                  result4 = parse_compound_tone();
                  if (result4 !== null) {
                    result3 = [result3, result4];
                  } else {
                    result3 = null;
                    pos = pos2;
                  }
                } else {
                  result3 = null;
                  pos = pos2;
                }
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 === null) {
          pos1 = pos;
          result0 = parse_predicate_word();
          if (result0 !== null) {
            result1 = parse_preposition_tone();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["P", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_coP_preposition() {
        var cacheKey = "coP_preposition@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_preposition_1();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_co_bar_preposition();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("CoP(P)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_co_bar_preposition() {
        var cacheKey = "co_bar_preposition@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_connective();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_preposition();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("Co'", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_forethought_coP_preposition() {
        var cacheKey = "forethought_coP_preposition@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_forethought_connective();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_forethought_coP_preposition_1();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("forethoughtCoP(P)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_forethought_coP_preposition_1() {
        var cacheKey = "forethought_coP_preposition_1@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_preposition();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_forethought_co_bar_preposition();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("CoP(P)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_forethought_co_bar_preposition() {
        var cacheKey = "forethought_co_bar_preposition@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_gik();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_preposition();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("Co'", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_serial_preposition() {
        var cacheKey = "serial_preposition@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_preposition_3();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_serial_predicate();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("serialP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_coP_pred_preposition() {
        var cacheKey = "coP_pred_preposition@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_preposition_4();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_co_bar_pred();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("CoP(P)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_forethought_coP_pred_preposition() {
        var cacheKey = "forethought_coP_pred_preposition@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_forethought_connective();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_forethought_coP_pred_preposition_1();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("forethoughtCoP(P)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_forethought_coP_pred_preposition_1() {
        var cacheKey = "forethought_coP_pred_preposition_1@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_preposition();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_forethought_co_bar_pred();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("CoP(P)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LU_preposition() {
        var cacheKey = "LU_preposition@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_LU_preposition_tone();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_statement();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("P", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LU_preposition_tone() {
        var cacheKey = "LU_preposition_tone@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_LU();
        if (result0 !== null) {
          result1 = parse_preposition_tone();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["predicatizer", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MI_preposition() {
        var cacheKey = "MI_preposition@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_MI_preposition_1();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_GA();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("P", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MI_preposition_1() {
        var cacheKey = "MI_preposition_1@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_MI_preposition_tone();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_predicate();
            if (result2 === null) {
              result2 = parse_argument();
              if (result2 === null) {
                result2 = parse_adverb();
                if (result2 === null) {
                  result2 = parse_prepositional_phrase();
                }
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("P", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MI_preposition_tone() {
        var cacheKey = "MI_preposition_tone@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_MI();
        if (result0 !== null) {
          result1 = parse_preposition_tone();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["predicatizer", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PO_preposition() {
        var cacheKey = "PO_preposition@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_PO_preposition_1();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_GA();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("P", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PO_preposition_1() {
        var cacheKey = "PO_preposition_1@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_PO_preposition_tone();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_argument();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("P", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PO_preposition_tone() {
        var cacheKey = "PO_preposition_tone@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_PO();
        if (result0 !== null) {
          result1 = parse_preposition_tone();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["predicatizer", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_quotation_preposition() {
        var cacheKey = "quotation_preposition@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_MO_preposition();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_TEO();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("P", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MO_preposition() {
        var cacheKey = "MO_preposition@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_MO_preposition_tone();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_discourse();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("P", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MO_preposition_tone() {
        var cacheKey = "MO_preposition_tone@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_MO();
        if (result0 !== null) {
          result1 = parse_preposition_tone();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["quote", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_content_clause() {
        var cacheKey = "content_clause@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_coP_content_statement();
        if (result0 === null) {
          result0 = parse_content_clause_1();
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("content", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_content_clause_1() {
        var cacheKey = "content_clause_1@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_content_predication();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_end_statement();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 === null) {
          result0 = parse_LU_content();
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("content", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_content_predication() {
        var cacheKey = "content_predication@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_content_predicate();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_terms();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("content_2", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_coP_content_statement() {
        var cacheKey = "coP_content_statement@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_content_clause_1();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_co_bar_statement();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("CoP(CP)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_content_predicate() {
        var cacheKey = "content_predicate@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_serial_content_predicate();
        if (result0 === null) {
          result0 = parse_content_predicate_1();
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("predicate", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_content_predicate_1() {
        var cacheKey = "content_predicate_1@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_coP_pred_content_predicate();
        if (result0 === null) {
          result0 = parse_forethought_coP_pred_content_predicate();
          if (result0 === null) {
            result0 = parse_content_predicate_2();
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("predicate_1", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_content_predicate_2() {
        var cacheKey = "content_predicate_2@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_MI_content_predicate();
        if (result0 === null) {
          result0 = parse_PO_content_predicate();
          if (result0 === null) {
            result0 = parse_quotation_content_predicate();
            if (result0 === null) {
              result0 = parse_content_predicate_3();
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("predicate_2", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_content_predicate_3() {
        var cacheKey = "content_predicate_3@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_syllable();
        if (result0 !== null) {
          result1 = parse_content_tone();
          if (result1 !== null) {
            pos2 = pos;
            result3 = parse_syllable();
            if (result3 !== null) {
              result4 = parse_compound_tone();
              if (result4 !== null) {
                result3 = [result3, result4];
              } else {
                result3 = null;
                pos = pos2;
              }
            } else {
              result3 = null;
              pos = pos2;
            }
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                pos2 = pos;
                result3 = parse_syllable();
                if (result3 !== null) {
                  result4 = parse_compound_tone();
                  if (result4 !== null) {
                    result3 = [result3, result4];
                  } else {
                    result3 = null;
                    pos = pos2;
                  }
                } else {
                  result3 = null;
                  pos = pos2;
                }
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 === null) {
          pos1 = pos;
          result0 = parse_predicate_word();
          if (result0 !== null) {
            result1 = parse_content_tone();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["predicate_3", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_serial_content_predicate() {
        var cacheKey = "serial_content_predicate@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_content_predicate_1();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_serial_predicate();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("serialP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_coP_pred_content_predicate() {
        var cacheKey = "coP_pred_content_predicate@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_content_predicate_2();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_co_bar_pred();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("CoP(VP)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_forethought_coP_pred_content_predicate() {
        var cacheKey = "forethought_coP_pred_content_predicate@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_forethought_connective();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_forethought_coP_pred_content_predicate_1();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("forethoughtCoP(VP)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_forethought_coP_pred_content_predicate_1() {
        var cacheKey = "forethought_coP_pred_content_predicate_1@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_content_predicate();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_forethought_co_bar_pred();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("CoP(VP)", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LU_content() {
        var cacheKey = "LU_content@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_LU_content_tone();
        if (result0 !== null) {
          result1 = parse_statement();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("CP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LU_content_tone() {
        var cacheKey = "LU_content_tone@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_LU();
        if (result0 !== null) {
          result1 = parse_content_tone();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["predicatizer", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MI_content_predicate() {
        var cacheKey = "MI_content_predicate@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_MI_content_predicate_1();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_GA();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("VP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MI_content_predicate_1() {
        var cacheKey = "MI_content_predicate_1@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_MI_content_tone();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_predicate();
            if (result2 === null) {
              result2 = parse_argument();
              if (result2 === null) {
                result2 = parse_adverb();
                if (result2 === null) {
                  result2 = parse_prepositional_phrase();
                }
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("VP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MI_content_tone() {
        var cacheKey = "MI_content_tone@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_MI();
        if (result0 !== null) {
          result1 = parse_content_tone();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["predicatizer", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PO_content_predicate() {
        var cacheKey = "PO_content_predicate@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_PO_content_predicate_1();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_GA();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("VP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PO_content_predicate_1() {
        var cacheKey = "PO_content_predicate_1@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_PO_content_tone();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_argument();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("VP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PO_content_tone() {
        var cacheKey = "PO_content_tone@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_PO();
        if (result0 !== null) {
          result1 = parse_content_tone();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["predicatizer", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_quotation_content_predicate() {
        var cacheKey = "quotation_content_predicate@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_MO_content_predicate();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_TEO();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("VP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MO_content_predicate() {
        var cacheKey = "MO_content_predicate@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_MO_content_predicate_tone();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_discourse();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("VP", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MO_content_predicate_tone() {
        var cacheKey = "MO_content_predicate_tone@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_MO();
        if (result0 !== null) {
          result1 = parse_content_tone();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["quote", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_freemod() {
        var cacheKey = "freemod@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_spaces();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_interjection();
          if (result1 === null) {
            result1 = parse_parenthetical();
            if (result1 === null) {
              result1 = parse_incidental();
              if (result1 === null) {
                result1 = parse_vocative();
              }
            }
          }
          if (result1 !== null) {
            result2 = parse_spaces();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_freemod();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("freemod", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_interjection() {
        var cacheKey = "interjection@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 2) === "ha") {
          result0 = "ha";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"ha\"");
          }
        }
        if (result0 !== null) {
          pos2 = pos;
          reportFailures++;
          result1 = parse_boundary();
          reportFailures--;
          if (result1 !== null) {
            result1 = "";
            pos = pos2;
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["interjection", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_parenthetical() {
        var cacheKey = "parenthetical@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_parenthetical_1();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_end_parenthetical();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("parenthetical", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_parenthetical_1() {
        var cacheKey = "parenthetical_1@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_start_parenthetical();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_discourse();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("parenthetical", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_incidental() {
        var cacheKey = "incidental@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_spaces();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_start_incidental();
          if (result1 !== null) {
            result2 = parse_freemod();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_statement();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("incidental", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_vocative() {
        var cacheKey = "vocative@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_vocative_marker();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_argument();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("vocative", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_prefix() {
        var cacheKey = "prefix@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_prefix_1();
        if (result0 !== null) {
          result1 = parse_freemod();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("prefix", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_prefix_1() {
        var cacheKey = "prefix_1@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_m();
        if (result0 !== null) {
          result1 = parse_u();
          if (result1 !== null) {
            pos2 = pos;
            reportFailures++;
            result2 = parse_boundary();
            reportFailures--;
            if (result2 !== null) {
              result2 = "";
              pos = pos2;
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["prefix", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_focus() {
        var cacheKey = "focus@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_k();
        if (result0 !== null) {
          result1 = parse_u();
          if (result1 !== null) {
            pos2 = pos;
            reportFailures++;
            result2 = parse_boundary();
            reportFailures--;
            if (result2 !== null) {
              result2 = "";
              pos = pos2;
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["Focus", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_end_statement() {
        var cacheKey = "end_statement@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_end_statement_1();
        if (result0 !== null) {
          result1 = parse_freemod();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("end", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_end_statement_1() {
        var cacheKey = "end_statement_1@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_n();
        if (result0 !== null) {
          result1 = parse_a();
          if (result1 !== null) {
            pos2 = pos;
            reportFailures++;
            result2 = parse_boundary();
            reportFailures--;
            if (result2 !== null) {
              result2 = "";
              pos = pos2;
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["end_1", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_null() {
        var cacheKey = "null@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_o();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result0 = (function(offset, expr) {return (expr == "") ? ["BEhO"] : _node("BEhO", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_illocutionary() {
        var cacheKey = "illocutionary@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_illocutionary_1();
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node("illocution", expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_illocutionary_1() {
        var cacheKey = "illocutionary_1@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        result0 = parse_m();
        if (result0 !== null) {
          result1 = parse_o();
          if (result1 !== null) {
            result2 = parse_q();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos2;
            }
          } else {
            result0 = null;
            pos = pos2;
          }
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 === null) {
          pos2 = pos;
          result0 = parse_d();
          if (result0 !== null) {
            result1 = parse_a();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos2;
            }
          } else {
            result0 = null;
            pos = pos2;
          }
          if (result0 === null) {
            pos2 = pos;
            result0 = parse_k();
            if (result0 !== null) {
              result1 = parse_a();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos2;
              }
            } else {
              result0 = null;
              pos = pos2;
            }
            if (result0 === null) {
              pos2 = pos;
              result0 = parse_s();
              if (result0 !== null) {
                result1 = parse_o();
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = pos2;
                }
              } else {
                result0 = null;
                pos = pos2;
              }
              if (result0 === null) {
                pos2 = pos;
                result0 = parse_b();
                if (result0 !== null) {
                  result1 = parse_a();
                  if (result1 !== null) {
                    result0 = [result0, result1];
                  } else {
                    result0 = null;
                    pos = pos2;
                  }
                } else {
                  result0 = null;
                  pos = pos2;
                }
              }
            }
          }
        }
        if (result0 !== null) {
          pos2 = pos;
          reportFailures++;
          result1 = parse_boundary();
          reportFailures--;
          if (result1 !== null) {
            result1 = "";
            pos = pos2;
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["illocution", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_quantifier() {
        var cacheKey = "quantifier@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        result0 = parse_t();
        if (result0 !== null) {
          result1 = parse_u();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos2;
          }
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 === null) {
          pos2 = pos;
          result0 = parse_s();
          if (result0 !== null) {
            result1 = parse_i();
            if (result1 !== null) {
              result2 = parse_a();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos2;
              }
            } else {
              result0 = null;
              pos = pos2;
            }
          } else {
            result0 = null;
            pos = pos2;
          }
          if (result0 === null) {
            pos2 = pos;
            result0 = parse_s();
            if (result0 !== null) {
              result1 = parse_a();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos2;
              }
            } else {
              result0 = null;
              pos = pos2;
            }
            if (result0 === null) {
              pos2 = pos;
              result0 = parse_h();
              if (result0 !== null) {
                result1 = parse_i();
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = pos2;
                }
              } else {
                result0 = null;
                pos = pos2;
              }
              if (result0 === null) {
                pos2 = pos;
                result0 = parse_j();
                if (result0 !== null) {
                  result1 = parse_a();
                  if (result1 !== null) {
                    result0 = [result0, result1];
                  } else {
                    result0 = null;
                    pos = pos2;
                  }
                } else {
                  result0 = null;
                  pos = pos2;
                }
              }
            }
          }
        }
        if (result0 !== null) {
          pos2 = pos;
          reportFailures++;
          result1 = parse_boundary();
          reportFailures--;
          if (result1 !== null) {
            result1 = "";
            pos = pos2;
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["quantifier", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_tone() {
        var cacheKey = "tone@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_compound_tone();
        if (result0 === null) {
          result0 = parse_arg_tone();
          if (result0 === null) {
            result0 = parse_verb_tone();
            if (result0 === null) {
              result0 = parse_relative_tone();
              if (result0 === null) {
                result0 = parse_adverb_tone();
                if (result0 === null) {
                  result0 = parse_preposition_tone();
                  if (result0 === null) {
                    result0 = parse_content_tone();
                  }
                }
              }
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _join(expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_compound_tone() {
        var cacheKey = "compound_tone@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        if (/^[\-1]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\-1]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {return "-";})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_arg_tone() {
        var cacheKey = "arg_tone@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        if (/^[\/2]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\/2]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {return "\/";})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_relative_tone() {
        var cacheKey = "relative_tone@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        if (/^[V3]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[V3]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {return "V";})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_verb_tone() {
        var cacheKey = "verb_tone@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        if (/^[?4]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[?4]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {return "?";})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_content_tone() {
        var cacheKey = "content_tone@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        if (/^[5^]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[5^]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {return "^";})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_preposition_tone() {
        var cacheKey = "preposition_tone@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        if (/^[\\6]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\\\6]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {return "\\";})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_adverb_tone() {
        var cacheKey = "adverb_tone@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        if (/^[~7]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[~7]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {return "~";})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_predicate_word() {
        var cacheKey = "predicate_word@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        reportFailures++;
        result0 = parse_function_word();
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 !== null) {
          result1 = parse_syllable();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _join(expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_function_word() {
        var cacheKey = "function_word@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_sentence_prefix();
        if (result0 === null) {
          result0 = parse_connective();
          if (result0 === null) {
            result0 = parse_start_incidental();
            if (result0 === null) {
              result0 = parse_start_parenthetical();
              if (result0 === null) {
                result0 = parse_end_parenthetical();
                if (result0 === null) {
                  result0 = parse_quantifier();
                  if (result0 === null) {
                    result0 = parse_illocutionary();
                    if (result0 === null) {
                      result0 = parse_end_statement();
                      if (result0 === null) {
                        result0 = parse_end_prenex();
                        if (result0 === null) {
                          result0 = parse_LU();
                          if (result0 === null) {
                            result0 = parse_MI();
                            if (result0 === null) {
                              result0 = parse_PO();
                              if (result0 === null) {
                                result0 = parse_MO();
                                if (result0 === null) {
                                  result0 = parse_TEO();
                                  if (result0 === null) {
                                    result0 = parse_GA();
                                    if (result0 === null) {
                                      result0 = parse_linking_word();
                                      if (result0 === null) {
                                        result0 = parse_vocative();
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _join(expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_end_prenex() {
        var cacheKey = "end_prenex@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        result0 = parse_b();
        if (result0 !== null) {
          result1 = parse_i();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos2;
          }
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 === null) {
          pos2 = pos;
          result0 = parse_p();
          if (result0 !== null) {
            result1 = parse_a();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos2;
            }
          } else {
            result0 = null;
            pos = pos2;
          }
        }
        if (result0 !== null) {
          pos2 = pos;
          reportFailures++;
          result1 = parse_boundary();
          reportFailures--;
          if (result1 !== null) {
            result1 = "";
            pos = pos2;
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["end", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_start_incidental() {
        var cacheKey = "start_incidental@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_j();
        if (result0 !== null) {
          result1 = parse_u();
          if (result1 !== null) {
            pos2 = pos;
            reportFailures++;
            result2 = parse_boundary();
            reportFailures--;
            if (result2 !== null) {
              result2 = "";
              pos = pos2;
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["incidental", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_start_parenthetical() {
        var cacheKey = "start_parenthetical@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_k();
        if (result0 !== null) {
          result1 = parse_i();
          if (result1 !== null) {
            result2 = parse_o();
            if (result2 !== null) {
              pos2 = pos;
              reportFailures++;
              result3 = parse_boundary();
              reportFailures--;
              if (result3 !== null) {
                result3 = "";
                pos = pos2;
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["parenthetical", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_end_parenthetical() {
        var cacheKey = "end_parenthetical@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_k();
        if (result0 !== null) {
          result1 = parse_i();
          if (result1 !== null) {
            pos2 = pos;
            reportFailures++;
            result2 = parse_boundary();
            reportFailures--;
            if (result2 !== null) {
              result2 = "";
              pos = pos2;
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["end", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_vocative_marker() {
        var cacheKey = "vocative_marker@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_h();
        if (result0 !== null) {
          result1 = parse_u();
          if (result1 !== null) {
            pos2 = pos;
            reportFailures++;
            result2 = parse_boundary();
            reportFailures--;
            if (result2 !== null) {
              result2 = "";
              pos = pos2;
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["vocative", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LU() {
        var cacheKey = "LU@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        result0 = parse_l();
        if (result0 !== null) {
          result1 = parse_u();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos2;
          }
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 === null) {
          pos2 = pos;
          result0 = parse_l();
          if (result0 !== null) {
            result1 = parse_i();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos2;
            }
          } else {
            result0 = null;
            pos = pos2;
          }
          if (result0 === null) {
            pos2 = pos;
            result0 = parse_l();
            if (result0 !== null) {
              result1 = parse_o();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos2;
              }
            } else {
              result0 = null;
              pos = pos2;
            }
            if (result0 === null) {
              pos2 = pos;
              result0 = parse_m();
              if (result0 !== null) {
                result1 = parse_a();
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = pos2;
                }
              } else {
                result0 = null;
                pos = pos2;
              }
              if (result0 === null) {
                pos2 = pos;
                result0 = parse_t();
                if (result0 !== null) {
                  result1 = parse_i();
                  if (result1 !== null) {
                    result2 = parse_o();
                    if (result2 !== null) {
                      result0 = [result0, result1, result2];
                    } else {
                      result0 = null;
                      pos = pos2;
                    }
                  } else {
                    result0 = null;
                    pos = pos2;
                  }
                } else {
                  result0 = null;
                  pos = pos2;
                }
              }
            }
          }
        }
        if (result0 !== null) {
          pos2 = pos;
          reportFailures++;
          result1 = parse_boundary();
          reportFailures--;
          if (result1 !== null) {
            result1 = "";
            pos = pos2;
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _join(expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MI() {
        var cacheKey = "MI@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        result0 = parse_m();
        if (result0 !== null) {
          result1 = parse_i();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos2;
          }
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 === null) {
          pos2 = pos;
          result0 = parse_s();
          if (result0 !== null) {
            result1 = parse_h();
            if (result1 !== null) {
              result2 = parse_u();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos2;
              }
            } else {
              result0 = null;
              pos = pos2;
            }
          } else {
            result0 = null;
            pos = pos2;
          }
        }
        if (result0 !== null) {
          pos2 = pos;
          reportFailures++;
          result1 = parse_boundary();
          reportFailures--;
          if (result1 !== null) {
            result1 = "";
            pos = pos2;
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _join(expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PO() {
        var cacheKey = "PO@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        result0 = parse_p();
        if (result0 !== null) {
          result1 = parse_o();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos2;
          }
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 === null) {
          pos2 = pos;
          result0 = parse_p();
          if (result0 !== null) {
            result1 = parse_e();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos2;
            }
          } else {
            result0 = null;
            pos = pos2;
          }
        }
        if (result0 !== null) {
          pos2 = pos;
          reportFailures++;
          result1 = parse_boundary();
          reportFailures--;
          if (result1 !== null) {
            result1 = "";
            pos = pos2;
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _join(expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MO() {
        var cacheKey = "MO@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        result0 = parse_m();
        if (result0 !== null) {
          result1 = parse_o();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos2;
          }
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 !== null) {
          pos2 = pos;
          reportFailures++;
          result1 = parse_boundary();
          reportFailures--;
          if (result1 !== null) {
            result1 = "";
            pos = pos2;
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _join(expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_TEO() {
        var cacheKey = "TEO@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        result0 = parse_t();
        if (result0 !== null) {
          result1 = parse_e();
          if (result1 !== null) {
            result2 = parse_o();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos2;
            }
          } else {
            result0 = null;
            pos = pos2;
          }
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 !== null) {
          pos2 = pos;
          reportFailures++;
          result1 = parse_boundary();
          reportFailures--;
          if (result1 !== null) {
            result1 = "";
            pos = pos2;
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["unquote", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_GA() {
        var cacheKey = "GA@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_g();
        if (result0 !== null) {
          result1 = parse_a();
          if (result1 !== null) {
            pos2 = pos;
            reportFailures++;
            result2 = parse_boundary();
            reportFailures--;
            if (result2 !== null) {
              result2 = "";
              pos = pos2;
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["end", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_syllable() {
        var cacheKey = "syllable@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_initial();
        if (result0 !== null) {
          result1 = parse_desinence();
          if (result1 !== null) {
            pos2 = pos;
            reportFailures++;
            result2 = parse_boundary();
            reportFailures--;
            if (result2 !== null) {
              result2 = "";
              pos = pos2;
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _join(expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_initial() {
        var cacheKey = "initial@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        result0 = parse_b();
        if (result0 === null) {
          pos1 = pos;
          result0 = parse_c();
          if (result0 !== null) {
            result1 = parse_h();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 === null) {
            result0 = parse_c();
            if (result0 === null) {
              result0 = parse_d();
              if (result0 === null) {
                result0 = parse_f();
                if (result0 === null) {
                  result0 = parse_g();
                  if (result0 === null) {
                    result0 = parse_h();
                    if (result0 === null) {
                      result0 = parse_j();
                      if (result0 === null) {
                        result0 = parse_k();
                        if (result0 === null) {
                          result0 = parse_l();
                          if (result0 === null) {
                            result0 = parse_m();
                            if (result0 === null) {
                              result0 = parse_n();
                              if (result0 === null) {
                                result0 = parse_p();
                                if (result0 === null) {
                                  result0 = parse_r();
                                  if (result0 === null) {
                                    pos1 = pos;
                                    result0 = parse_s();
                                    if (result0 !== null) {
                                      result1 = parse_h();
                                      if (result1 !== null) {
                                        result0 = [result0, result1];
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                    if (result0 === null) {
                                      result0 = parse_s();
                                      if (result0 === null) {
                                        result0 = parse_t();
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _join(expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_desinence() {
        var cacheKey = "desinence@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_a();
        if (result0 !== null) {
          result1 = parse_o();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 === null) {
          pos1 = pos;
          result0 = parse_a();
          if (result0 !== null) {
            result1 = parse_i();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 === null) {
            pos1 = pos;
            result0 = parse_a();
            if (result0 !== null) {
              result1 = parse_q();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 === null) {
              result0 = parse_a();
              if (result0 === null) {
                pos1 = pos;
                result0 = parse_u();
                if (result0 !== null) {
                  result1 = parse_a();
                  if (result1 !== null) {
                    result2 = parse_o();
                    if (result2 !== null) {
                      result0 = [result0, result1, result2];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
                if (result0 === null) {
                  pos1 = pos;
                  result0 = parse_u();
                  if (result0 !== null) {
                    result1 = parse_a();
                    if (result1 !== null) {
                      result2 = parse_i();
                      if (result2 !== null) {
                        result0 = [result0, result1, result2];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                  if (result0 === null) {
                    pos1 = pos;
                    result0 = parse_u();
                    if (result0 !== null) {
                      result1 = parse_e();
                      if (result1 !== null) {
                        result2 = parse_q();
                        if (result2 !== null) {
                          result0 = [result0, result1, result2];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                    if (result0 === null) {
                      pos1 = pos;
                      result0 = parse_u();
                      if (result0 !== null) {
                        result1 = parse_e();
                        if (result1 !== null) {
                          result0 = [result0, result1];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                      if (result0 === null) {
                        pos1 = pos;
                        result0 = parse_u();
                        if (result0 !== null) {
                          result1 = parse_o();
                          if (result1 !== null) {
                            result2 = parse_q();
                            if (result2 !== null) {
                              result0 = [result0, result1, result2];
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                        if (result0 === null) {
                          pos1 = pos;
                          result0 = parse_u();
                          if (result0 !== null) {
                            result1 = parse_o();
                            if (result1 !== null) {
                              result0 = [result0, result1];
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                          if (result0 === null) {
                            pos1 = pos;
                            result0 = parse_u();
                            if (result0 !== null) {
                              result1 = parse_i();
                              if (result1 !== null) {
                                result0 = [result0, result1];
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                            if (result0 === null) {
                              pos1 = pos;
                              result0 = parse_u();
                              if (result0 !== null) {
                                result1 = parse_a();
                                if (result1 !== null) {
                                  result2 = parse_q();
                                  if (result2 !== null) {
                                    result0 = [result0, result1, result2];
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                              if (result0 === null) {
                                pos1 = pos;
                                result0 = parse_u();
                                if (result0 !== null) {
                                  result1 = parse_a();
                                  if (result1 !== null) {
                                    result0 = [result0, result1];
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                                if (result0 === null) {
                                  pos1 = pos;
                                  result0 = parse_u();
                                  if (result0 !== null) {
                                    result1 = parse_q();
                                    if (result1 !== null) {
                                      result0 = [result0, result1];
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                  if (result0 === null) {
                                    result0 = parse_u();
                                    if (result0 === null) {
                                      pos1 = pos;
                                      result0 = parse_i();
                                      if (result0 !== null) {
                                        result1 = parse_a();
                                        if (result1 !== null) {
                                          result2 = parse_o();
                                          if (result2 !== null) {
                                            result0 = [result0, result1, result2];
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                      if (result0 === null) {
                                        pos1 = pos;
                                        result0 = parse_i();
                                        if (result0 !== null) {
                                          result1 = parse_a();
                                          if (result1 !== null) {
                                            result2 = parse_i();
                                            if (result2 !== null) {
                                              result0 = [result0, result1, result2];
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                        if (result0 === null) {
                                          pos1 = pos;
                                          result0 = parse_i();
                                          if (result0 !== null) {
                                            result1 = parse_e();
                                            if (result1 !== null) {
                                              result2 = parse_q();
                                              if (result2 !== null) {
                                                result0 = [result0, result1, result2];
                                              } else {
                                                result0 = null;
                                                pos = pos1;
                                              }
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                          if (result0 === null) {
                                            pos1 = pos;
                                            result0 = parse_i();
                                            if (result0 !== null) {
                                              result1 = parse_e();
                                              if (result1 !== null) {
                                                result0 = [result0, result1];
                                              } else {
                                                result0 = null;
                                                pos = pos1;
                                              }
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                            if (result0 === null) {
                                              pos1 = pos;
                                              result0 = parse_i();
                                              if (result0 !== null) {
                                                result1 = parse_o();
                                                if (result1 !== null) {
                                                  result2 = parse_q();
                                                  if (result2 !== null) {
                                                    result0 = [result0, result1, result2];
                                                  } else {
                                                    result0 = null;
                                                    pos = pos1;
                                                  }
                                                } else {
                                                  result0 = null;
                                                  pos = pos1;
                                                }
                                              } else {
                                                result0 = null;
                                                pos = pos1;
                                              }
                                              if (result0 === null) {
                                                pos1 = pos;
                                                result0 = parse_i();
                                                if (result0 !== null) {
                                                  result1 = parse_o();
                                                  if (result1 !== null) {
                                                    result0 = [result0, result1];
                                                  } else {
                                                    result0 = null;
                                                    pos = pos1;
                                                  }
                                                } else {
                                                  result0 = null;
                                                  pos = pos1;
                                                }
                                                if (result0 === null) {
                                                  pos1 = pos;
                                                  result0 = parse_i();
                                                  if (result0 !== null) {
                                                    result1 = parse_u();
                                                    if (result1 !== null) {
                                                      result0 = [result0, result1];
                                                    } else {
                                                      result0 = null;
                                                      pos = pos1;
                                                    }
                                                  } else {
                                                    result0 = null;
                                                    pos = pos1;
                                                  }
                                                  if (result0 === null) {
                                                    pos1 = pos;
                                                    result0 = parse_i();
                                                    if (result0 !== null) {
                                                      result1 = parse_a();
                                                      if (result1 !== null) {
                                                        result2 = parse_q();
                                                        if (result2 !== null) {
                                                          result0 = [result0, result1, result2];
                                                        } else {
                                                          result0 = null;
                                                          pos = pos1;
                                                        }
                                                      } else {
                                                        result0 = null;
                                                        pos = pos1;
                                                      }
                                                    } else {
                                                      result0 = null;
                                                      pos = pos1;
                                                    }
                                                    if (result0 === null) {
                                                      pos1 = pos;
                                                      result0 = parse_i();
                                                      if (result0 !== null) {
                                                        result1 = parse_a();
                                                        if (result1 !== null) {
                                                          result0 = [result0, result1];
                                                        } else {
                                                          result0 = null;
                                                          pos = pos1;
                                                        }
                                                      } else {
                                                        result0 = null;
                                                        pos = pos1;
                                                      }
                                                      if (result0 === null) {
                                                        pos1 = pos;
                                                        result0 = parse_i();
                                                        if (result0 !== null) {
                                                          result1 = parse_q();
                                                          if (result1 !== null) {
                                                            result0 = [result0, result1];
                                                          } else {
                                                            result0 = null;
                                                            pos = pos1;
                                                          }
                                                        } else {
                                                          result0 = null;
                                                          pos = pos1;
                                                        }
                                                        if (result0 === null) {
                                                          result0 = parse_i();
                                                          if (result0 === null) {
                                                            pos1 = pos;
                                                            result0 = parse_o();
                                                            if (result0 !== null) {
                                                              result1 = parse_e();
                                                              if (result1 !== null) {
                                                                result2 = parse_q();
                                                                if (result2 !== null) {
                                                                  result0 = [result0, result1, result2];
                                                                } else {
                                                                  result0 = null;
                                                                  pos = pos1;
                                                                }
                                                              } else {
                                                                result0 = null;
                                                                pos = pos1;
                                                              }
                                                            } else {
                                                              result0 = null;
                                                              pos = pos1;
                                                            }
                                                            if (result0 === null) {
                                                              pos1 = pos;
                                                              result0 = parse_o();
                                                              if (result0 !== null) {
                                                                result1 = parse_e();
                                                                if (result1 !== null) {
                                                                  result0 = [result0, result1];
                                                                } else {
                                                                  result0 = null;
                                                                  pos = pos1;
                                                                }
                                                              } else {
                                                                result0 = null;
                                                                pos = pos1;
                                                              }
                                                              if (result0 === null) {
                                                                pos1 = pos;
                                                                result0 = parse_o();
                                                                if (result0 !== null) {
                                                                  result1 = parse_i();
                                                                  if (result1 !== null) {
                                                                    result0 = [result0, result1];
                                                                  } else {
                                                                    result0 = null;
                                                                    pos = pos1;
                                                                  }
                                                                } else {
                                                                  result0 = null;
                                                                  pos = pos1;
                                                                }
                                                                if (result0 === null) {
                                                                  pos1 = pos;
                                                                  result0 = parse_o();
                                                                  if (result0 !== null) {
                                                                    result1 = parse_a();
                                                                    if (result1 !== null) {
                                                                      result2 = parse_q();
                                                                      if (result2 !== null) {
                                                                        result0 = [result0, result1, result2];
                                                                      } else {
                                                                        result0 = null;
                                                                        pos = pos1;
                                                                      }
                                                                    } else {
                                                                      result0 = null;
                                                                      pos = pos1;
                                                                    }
                                                                  } else {
                                                                    result0 = null;
                                                                    pos = pos1;
                                                                  }
                                                                  if (result0 === null) {
                                                                    pos1 = pos;
                                                                    result0 = parse_o();
                                                                    if (result0 !== null) {
                                                                      result1 = parse_a();
                                                                      if (result1 !== null) {
                                                                        result0 = [result0, result1];
                                                                      } else {
                                                                        result0 = null;
                                                                        pos = pos1;
                                                                      }
                                                                    } else {
                                                                      result0 = null;
                                                                      pos = pos1;
                                                                    }
                                                                    if (result0 === null) {
                                                                      pos1 = pos;
                                                                      result0 = parse_o();
                                                                      if (result0 !== null) {
                                                                        result1 = parse_q();
                                                                        if (result1 !== null) {
                                                                          result0 = [result0, result1];
                                                                        } else {
                                                                          result0 = null;
                                                                          pos = pos1;
                                                                        }
                                                                      } else {
                                                                        result0 = null;
                                                                        pos = pos1;
                                                                      }
                                                                      if (result0 === null) {
                                                                        result0 = parse_o();
                                                                        if (result0 === null) {
                                                                          pos1 = pos;
                                                                          result0 = parse_e();
                                                                          if (result0 !== null) {
                                                                            result1 = parse_o();
                                                                            if (result1 !== null) {
                                                                              result2 = parse_q();
                                                                              if (result2 !== null) {
                                                                                result0 = [result0, result1, result2];
                                                                              } else {
                                                                                result0 = null;
                                                                                pos = pos1;
                                                                              }
                                                                            } else {
                                                                              result0 = null;
                                                                              pos = pos1;
                                                                            }
                                                                          } else {
                                                                            result0 = null;
                                                                            pos = pos1;
                                                                          }
                                                                          if (result0 === null) {
                                                                            pos1 = pos;
                                                                            result0 = parse_e();
                                                                            if (result0 !== null) {
                                                                              result1 = parse_o();
                                                                              if (result1 !== null) {
                                                                                result0 = [result0, result1];
                                                                              } else {
                                                                                result0 = null;
                                                                                pos = pos1;
                                                                              }
                                                                            } else {
                                                                              result0 = null;
                                                                              pos = pos1;
                                                                            }
                                                                            if (result0 === null) {
                                                                              pos1 = pos;
                                                                              result0 = parse_e();
                                                                              if (result0 !== null) {
                                                                                result1 = parse_i();
                                                                                if (result1 !== null) {
                                                                                  result0 = [result0, result1];
                                                                                } else {
                                                                                  result0 = null;
                                                                                  pos = pos1;
                                                                                }
                                                                              } else {
                                                                                result0 = null;
                                                                                pos = pos1;
                                                                              }
                                                                              if (result0 === null) {
                                                                                pos1 = pos;
                                                                                result0 = parse_e();
                                                                                if (result0 !== null) {
                                                                                  result1 = parse_a();
                                                                                  if (result1 !== null) {
                                                                                    result2 = parse_q();
                                                                                    if (result2 !== null) {
                                                                                      result0 = [result0, result1, result2];
                                                                                    } else {
                                                                                      result0 = null;
                                                                                      pos = pos1;
                                                                                    }
                                                                                  } else {
                                                                                    result0 = null;
                                                                                    pos = pos1;
                                                                                  }
                                                                                } else {
                                                                                  result0 = null;
                                                                                  pos = pos1;
                                                                                }
                                                                                if (result0 === null) {
                                                                                  pos1 = pos;
                                                                                  result0 = parse_e();
                                                                                  if (result0 !== null) {
                                                                                    result1 = parse_a();
                                                                                    if (result1 !== null) {
                                                                                      result0 = [result0, result1];
                                                                                    } else {
                                                                                      result0 = null;
                                                                                      pos = pos1;
                                                                                    }
                                                                                  } else {
                                                                                    result0 = null;
                                                                                    pos = pos1;
                                                                                  }
                                                                                  if (result0 === null) {
                                                                                    pos1 = pos;
                                                                                    result0 = parse_e();
                                                                                    if (result0 !== null) {
                                                                                      result1 = parse_q();
                                                                                      if (result1 !== null) {
                                                                                        result0 = [result0, result1];
                                                                                      } else {
                                                                                        result0 = null;
                                                                                        pos = pos1;
                                                                                      }
                                                                                    } else {
                                                                                      result0 = null;
                                                                                      pos = pos1;
                                                                                    }
                                                                                    if (result0 === null) {
                                                                                      result0 = parse_e();
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _join(expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_vowel() {
        var cacheKey = "vowel@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_a();
        if (result0 === null) {
          result0 = parse_e();
          if (result0 === null) {
            result0 = parse_i();
            if (result0 === null) {
              result0 = parse_o();
              if (result0 === null) {
                result0 = parse_u();
              }
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _join(expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_boundary() {
        var cacheKey = "boundary@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0, pos1;
        
        pos0 = pos;
        result0 = parse_tone();
        if (result0 === null) {
          pos1 = pos;
          reportFailures++;
          result0 = parse_initial();
          reportFailures--;
          if (result0 !== null) {
            result0 = "";
            pos = pos1;
          } else {
            result0 = null;
          }
          if (result0 === null) {
            result0 = parse_spaces();
            if (result0 === null) {
              result0 = parse_EOF();
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _join(expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_a() {
        var cacheKey = "a@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        if (/^[aA]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[aA]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {return "a";})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_b() {
        var cacheKey = "b@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        if (/^[bB]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[bB]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {return "b";})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_c() {
        var cacheKey = "c@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        if (/^[cC]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[cC]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {return "c";})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_d() {
        var cacheKey = "d@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        if (/^[dD]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[dD]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {return "d";})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_e() {
        var cacheKey = "e@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        if (/^[eE]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[eE]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {return "e";})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_f() {
        var cacheKey = "f@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        if (/^[fF]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[fF]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {return "f";})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_g() {
        var cacheKey = "g@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        if (/^[gG]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[gG]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {return "g";})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_h() {
        var cacheKey = "h@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        if (/^[hH]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[hH]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {return "h";})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_i() {
        var cacheKey = "i@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        if (/^[iI]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[iI]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {return "i";})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_j() {
        var cacheKey = "j@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        if (/^[jJ]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[jJ]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {return "j";})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_k() {
        var cacheKey = "k@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        if (/^[kK]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[kK]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {return "k";})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_l() {
        var cacheKey = "l@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        if (/^[lL]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[lL]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {return "l";})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_m() {
        var cacheKey = "m@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        if (/^[mM]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[mM]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {return "m";})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_n() {
        var cacheKey = "n@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        if (/^[nN]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[nN]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {return "n";})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_o() {
        var cacheKey = "o@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        if (/^[oO]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[oO]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {return "o";})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_p() {
        var cacheKey = "p@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        if (/^[pP]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[pP]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {return "p";})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_q() {
        var cacheKey = "q@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        if (/^[qQ]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[qQ]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {return "q";})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_r() {
        var cacheKey = "r@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        if (/^[rR]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[rR]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {return "r";})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_s() {
        var cacheKey = "s@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        if (/^[sS]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[sS]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {return "s";})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_t() {
        var cacheKey = "t@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        if (/^[tT]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[tT]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {return "t";})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_u() {
        var cacheKey = "u@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        if (/^[uU]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[uU]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {return "u";})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_w() {
        var cacheKey = "w@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        if (/^[wW]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[wW]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {return "w";})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_y() {
        var cacheKey = "y@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        if (/^[yY]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[yY]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {return "y";})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_EOF() {
        var cacheKey = "EOF@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        reportFailures++;
        if (input.length > pos) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("any character");
          }
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _join(expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_spaces() {
        var cacheKey = "spaces@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result1 = parse_space_char();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_space_char();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _join(expr);})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_space_char() {
        var cacheKey = "space_char@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        if (/^[.\t\n\r!, ]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[.\\t\\n\\r!, ]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {return "";})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
          var ch = input.charAt(i);
          if (ch === "\n") {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
        function _join(arg)
        {
          if (typeof(arg) == "string")
            return arg;
          else
          {
            ret = "";
            for (v in arg) { ret += _join(arg[v]); }
            return ret;
          }
        }
      
        function _node(label, arg)
        {
          var ret = [];
          if (label != undefined) ret.push( label );
          if (typeof( arg ) == "object" && typeof( arg[0] ) == "string" && arg[0] != "")
          {
            ret.push( arg );
            return ret;
          }
          return _node_int(label, arg);
        } 
      
        function _node_int(label, arg)
        {
          if (typeof( arg ) == "string")
            return arg;
          var ret = [];
          if (label != undefined) ret.push( label );
          for (v in arg)
          {
            if (arg[v].length != 0)
              ret.push( _node_int( undefined, arg[v] ) );
          }
          return ret;
        }
       
        function _node2(label, arg1, arg2)
        {
          return [label].concat(_node(arg1)).concat(_node(arg2));
        }
      
        function _node_nonempty(label, arg)
        {
          var _n = _node(label, arg);
          return (_n.length == 1 && _n[0] == label) ? [] : _n;
        }
        
        function is_string(v) {
          return typeof v.valueOf() === 'string';
        }
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var offset = Math.max(pos, rightmostFailuresPos);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = computeErrorPosition();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})()

module.exports = camxes;